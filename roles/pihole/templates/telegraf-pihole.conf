[[inputs.http]]
  urls = [
    "http://{{ macvlan_ip_pihole }}/admin/api.php",
    "http://{{ macvlan_ip_pihole }}/admin/api.php?version",
    "http://{{ macvlan_ip_pihole }}/admin/api.php?getQueryTypes&auth={{ pihole_api_key }}",
    "http://{{ macvlan_ip_pihole }}/admin/api.php?getForwardDestinations&auth={{ pihole_api_key }}"
  ]
  name_suffix = "_pihole"
  data_format = "json"
  interval = "10m"
  tagexclude = ["url"]

[[inputs.http]]
  urls = [
    "http://{{ macvlan_ip_pihole }}/admin/api.php?topItems=25&auth={{ pihole_api_key }}",
    "http://{{ macvlan_ip_pihole }}/admin/api.php?topClients=25&auth={{ pihole_api_key }}"
  ]
  name_suffix = "_top_pihole"
  data_format = "json"
  interval = "10m"
  tagexclude = ["url"]

[[processors.starlark]]
  namepass = ['http_top_pihole']
  source = '''
def apply(metric):
   adsMetric = Metric("http_top_pihole")
   adsMetric.tags["type"] = "ads"
   adsMetric.time = metric.time
   for k, v in metric.fields.items():
      if k.startswith("top_ads"):
         fieldName = k.replace("top_ads_","")
         adsMetric.fields[fieldName] = v

   queriesMetric = Metric("http_top_pihole")
   queriesMetric.tags["type"] = "queries"
   queriesMetric.time = metric.time
   for k, v in metric.fields.items():
      if k.startswith("top_queries"):
         fieldName = k.replace("top_queries_","")
         queriesMetric.fields[fieldName] = v

   clientsMetric = Metric("http_top_pihole")
   clientsMetric.tags["type"] = "clients"
   clientsMetric.time = metric.time
   for k, v in metric.fields.items():
      if k.startswith("top_sources"):
         fieldName = k.replace("top_sources_","")
         parts = fieldName.rsplit("|",1)
         # filedName= localhost.lan|192.168.10.171
         nameOrIP=parts[0]
         clientsMetric.fields[nameOrIP] = v

   return [adsMetric, queriesMetric, clientsMetric]
'''

[[inputs.http]]
  urls = [
    "http://{{ macvlan_ip_pihole }}/admin/api.php?overTimeData10mins"
  ]
  name_suffix = "_overTimeData10mins_pihole"
  data_format = "json"
  interval = "10m"
  tagexclude = ["url"]

[[processors.starlark]]
  namepass = ['http_overTimeData10mins_pihole']
  source = '''
def apply(metric):
   metrics = []
   for k, v in metric.fields.items():
      type, ts = k.rsplit("_", 1)
      m = Metric(metric.name)
      m.time = int(ts) * 1000000000
      m.fields["count"] = v
      m.tags["type"] = type
      metrics.append(m)
   return metrics
 '''

[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ## urls exp: http://127.0.0.1:8086
  urls = ["http://localhost:8086"]

  ## Token for authentication.
  token = "{{ telegraf_influxdb_token }}"

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "home"

  ## Destination bucket to write into.
  bucket = "default"
  namepass = [ "*_pihole" ]